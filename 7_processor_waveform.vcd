$date
	Sat Aug 16 15:01:41 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_processor $end
$var wire 1 ! zero_flag $end
$var wire 1 " error_flag $end
$var reg 1 # clock $end
$var reg 1 $ reset $end
$scope module GYMS_16 $end
$var wire 1 # clock $end
$var wire 1 $ reset $end
$var wire 1 ! zero_flag $end
$var wire 1 % reg_signal_write $end
$var wire 4 & opcode [3:0] $end
$var wire 1 ' mem_signal_write $end
$var wire 1 " error_flag $end
$scope module CONTROL $end
$var wire 4 ( opcode [3:0] $end
$var parameter 3 ) addsub_inst $end
$var parameter 3 * andor_inst $end
$var parameter 3 + div_inst $end
$var parameter 3 , mem_data_inst $end
$var parameter 3 - notxor_inst $end
$var parameter 3 . reg_data_inst $end
$var parameter 3 / shift_inst $end
$var reg 1 ' mem_signal_write $end
$var reg 1 % reg_signal_write $end
$upscope $end
$scope module DATA $end
$var wire 1 # clock $end
$var wire 1 ' mem_signal_write $end
$var wire 4 0 opcode [3:0] $end
$var wire 1 % reg_signal_write $end
$var wire 1 $ reset $end
$var wire 1 ! zero_flag $end
$var wire 16 1 reg_data_read2 [15:0] $end
$var wire 16 2 reg_data_read1 [15:0] $end
$var wire 16 3 mem_data_read [15:0] $end
$var wire 16 4 instruction [15:0] $end
$var wire 1 " error_flag $end
$var wire 3 5 count_ID [2:0] $end
$var wire 3 6 count_EX [2:0] $end
$var wire 16 7 alu_res [15:0] $end
$var parameter 3 8 addsub_inst $end
$var parameter 3 9 andor_inst $end
$var parameter 4 : arith_add $end
$var parameter 4 ; arith_div $end
$var parameter 4 < arith_sub $end
$var parameter 4 = bit_and $end
$var parameter 4 > bit_not $end
$var parameter 4 ? bit_or $end
$var parameter 4 @ bit_xor $end
$var parameter 3 A div_inst $end
$var parameter 3 B mem_data_inst $end
$var parameter 3 C nop $end
$var parameter 32 D nop_width $end
$var parameter 3 E notxor_inst $end
$var parameter 3 F reg_data_inst $end
$var parameter 4 G shift_ari_left $end
$var parameter 4 H shift_ari_right $end
$var parameter 3 I shift_inst $end
$var parameter 4 J shift_log_left $end
$var parameter 4 K shift_log_right $end
$var reg 16 L EX_MEM_mem_data_write [15:0] $end
$var reg 1 M EX_MEM_mem_signal_write $end
$var reg 4 N EX_MEM_opcode [3:0] $end
$var reg 4 O EX_MEM_reg_addr_write [3:0] $end
$var reg 16 P EX_MEM_reg_data_write [15:0] $end
$var reg 16 Q ID_EX_instruction [15:0] $end
$var reg 16 R ID_EX_mem_data_write [15:0] $end
$var reg 4 S ID_EX_opcode [3:0] $end
$var reg 4 T ID_EX_operation [3:0] $end
$var reg 4 U ID_EX_reg_addr_write [3:0] $end
$var reg 16 V ID_EX_reg_data_read1 [15:0] $end
$var reg 16 W ID_EX_reg_data_read2 [15:0] $end
$var reg 16 X ID_EX_reg_data_write [15:0] $end
$var reg 16 Y IF_ID_instruction [15:0] $end
$var reg 4 Z IF_ID_opcode [3:0] $end
$var reg 8 [ IF_ID_program_counter [7:0] $end
$var reg 4 \ MEM_WB_reg_addr_write [3:0] $end
$var reg 16 ] MEM_WB_reg_data_write [15:0] $end
$var reg 1 ^ MEM_WB_reg_signal_write $end
$var reg 16 _ alu_op1 [15:0] $end
$var reg 16 ` alu_op2 [15:0] $end
$var reg 1 a counter_EX_en $end
$var reg 1 b counter_ID_en $end
$var reg 8 c mem_addr_rw [7:0] $end
$var reg 16 d mem_data_write [15:0] $end
$var reg 4 e operation [3:0] $end
$var reg 8 f program_counter [7:0] $end
$var reg 4 g reg_addr_read1 [3:0] $end
$var reg 4 h reg_addr_read2 [3:0] $end
$var reg 4 i reg_addr_write [3:0] $end
$var reg 16 j reg_data_write [15:0] $end
$scope module ALU $end
$var wire 16 k alu_op1 [15:0] $end
$var wire 16 l alu_op2 [15:0] $end
$var wire 4 m operation [3:0] $end
$var parameter 4 n arith_add $end
$var parameter 4 o arith_div $end
$var parameter 4 p arith_sub $end
$var parameter 4 q bit_and $end
$var parameter 4 r bit_not $end
$var parameter 4 s bit_or $end
$var parameter 4 t bit_xor $end
$var parameter 4 u shift_ari_left $end
$var parameter 4 v shift_ari_right $end
$var parameter 4 w shift_log_left $end
$var parameter 4 x shift_log_right $end
$var reg 16 y alu_res [15:0] $end
$var reg 1 " error_flag $end
$var reg 1 ! zero_flag $end
$upscope $end
$scope module COUNT_EX $end
$var wire 1 # clock $end
$var wire 1 a en $end
$var wire 1 $ reset $end
$var parameter 32 z width $end
$var reg 3 { count [2:0] $end
$upscope $end
$scope module COUNT_ID $end
$var wire 1 # clock $end
$var wire 1 b en $end
$var wire 1 $ reset $end
$var parameter 32 | width $end
$var reg 3 } count [2:0] $end
$upscope $end
$scope module DM $end
$var wire 1 # clock $end
$var wire 8 ~ mem_addr_rw [7:0] $end
$var wire 16 !" mem_data_write [15:0] $end
$var wire 1 M mem_signal_write $end
$var wire 16 "" mem_data_read [15:0] $end
$var integer 32 #" i [31:0] $end
$upscope $end
$scope module IM $end
$var wire 16 $" instruction [15:0] $end
$var wire 8 %" program_counter [7:0] $end
$upscope $end
$scope module RF $end
$var wire 1 # clock $end
$var wire 4 &" reg_addr_read1 [3:0] $end
$var wire 4 '" reg_addr_read2 [3:0] $end
$var wire 4 (" reg_addr_write [3:0] $end
$var wire 16 )" reg_data_read1 [15:0] $end
$var wire 16 *" reg_data_read2 [15:0] $end
$var wire 16 +" reg_data_write [15:0] $end
$var wire 1 ^ reg_signal_write $end
$var integer 32 ," i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset_perform $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 |
b11 z
b110 x
b100 w
b111 v
b101 u
b10 t
b1 s
b11 r
b0 q
b1001 p
b1010 o
b1000 n
b110 K
b100 J
b100 I
b111 H
b101 G
b1 F
b11 E
b11 D
b111 C
b0 B
b110 A
b10 @
b1 ?
b11 >
b0 =
b1001 <
b1010 ;
b1000 :
b10 9
b101 8
b100 /
b1 .
b11 -
b0 ,
b110 +
b10 *
b101 )
$end
#0
$dumpvars
b10000 ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
b100000000 #"
bx ""
bx !"
bx ~
bx }
bx {
bx y
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
xb
xa
bx `
bx _
x^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
xM
bx L
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx (
x'
bx &
x%
x$
1#
x"
x!
$end
#5000
0$
0#
#10000
1#
#15000
1$
0#
#20000
b10000000001000 4
b10000000001000 $"
b0 f
b0 %"
1#
#25000
0#
#30000
b1000 j
b0 i
b10 Z
b0 [
b10000000001000 Y
1#
#35000
0#
#40000
b1000 X
b10000000001000 Q
b10 S
b0 U
1#
#45000
0#
#50000
0'
1%
b1000 P
b0 O
b10 &
b10 (
b10 0
b10 N
1#
#55000
0#
#60000
0M
b1000 ]
b1000 +"
1^
b0 \
b0 ("
1#
#65000
0#
#70000
1#
#75000
0#
#80000
1#
#85000
0#
#90000
1#
#95000
0#
#100000
1#
#105000
0#
#110000
1#
#115000
0#
#120000
1#
#125000
0#
#130000
1#
#135000
0#
#140000
1#
#145000
0#
#150000
1#
#155000
0#
#160000
1#
#165000
0#
#170000
1#
#175000
0#
#180000
1#
#185000
0#
#190000
1#
#195000
0#
#200000
1#
#205000
0#
#210000
1#
#215000
0#
#220000
1#
#225000
0#
#230000
1#
#235000
0#
#240000
1#
#245000
0#
#250000
1#
#255000
0#
#260000
1#
#265000
0#
#270000
1#
#275000
0#
#280000
1#
#285000
0#
#290000
1#
#295000
0#
#300000
1#
#305000
0#
#310000
1#
#315000
0#
#320000
1#
#325000
0#
#330000
1#
#335000
0#
#340000
1#
#345000
0#
#350000
1#
#355000
0#
#360000
1#
#365000
0#
#370000
1#
#375000
0#
#380000
1#
#385000
0#
#390000
1#
#395000
0#
#400000
1#
#405000
0#
#410000
1#
#415000
0#
#420000
1#
#425000
0#
#430000
1#
#435000
0#
#440000
1#
#445000
0#
#450000
1#
#455000
0#
#460000
1#
#465000
0#
#470000
1#
#475000
0#
#480000
1#
#485000
0#
#490000
1#
#495000
0#
#500000
1#
#505000
0#
#510000
1#
#515000
0#
#520000
1#
#525000
0#
#530000
1#
#535000
0#
#540000
1#
#545000
0#
#550000
1#
#555000
0#
#560000
1#
#565000
0#
#570000
1#
#575000
0#
#580000
1#
#585000
0#
#590000
1#
#595000
0#
#600000
1#
#605000
0#
#610000
1#
#615000
0#
#620000
1#
#625000
0#
#630000
1#
#635000
0#
#640000
1#
#645000
0#
#650000
1#
#655000
0#
#660000
1#
#665000
0#
#670000
1#
#675000
0#
#680000
1#
#685000
0#
#690000
1#
#695000
0#
#700000
1#
#705000
0#
#710000
1#
#715000
0#
#720000
1#
#725000
0#
#730000
1#
#735000
0#
#740000
1#
#745000
0#
#750000
1#
#755000
0#
#760000
1#
#765000
0#
#770000
1#
#775000
0#
#780000
1#
#785000
0#
#790000
1#
#795000
0#
#800000
1#
#805000
0#
#810000
1#
#815000
0#
#820000
1#
#825000
0#
#830000
1#
#835000
0#
#840000
1#
#845000
0#
#850000
1#
#855000
0#
#860000
1#
#865000
0#
#870000
1#
#875000
0#
#880000
1#
#885000
0#
#890000
1#
#895000
0#
#900000
1#
#905000
0#
#910000
1#
#915000
0#
#920000
1#
#925000
0#
#930000
1#
#935000
0#
#940000
1#
#945000
0#
#950000
1#
#955000
0#
#960000
1#
#965000
0#
#970000
1#
#975000
0#
#980000
1#
#985000
0#
#990000
1#
#995000
0#
#1000000
1#
#1005000
0#
#1010000
1#
#1015000
0#
